- name: Validate and Create Couchbase Indexes 
  hosts: all
  gather_facts: no  
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    couchbase_admin_username: ""
    couchbase_admin_password: "" 
    index_queries: [] 
    INDEX_NAME: ""
    script_path: "~/deffered_index.sh"
    duplicate_indexes: []
    some_query_output: []  
    existing_index_map: []
    query_types: []
    query_type: ""
    
    deffered_index_path: "/path/to/deffered_index.sh"
    default_index_path: "/path/to/default_index.sh"

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: []
        allowed_queries2: []
        not_allowed_queries: []
        queries_exceeding_fields: []
        query_field_mapping: []
        query_field_list: []

    - name: Extract bucket name(s) from Couchbase index queries
      set_fact:
        bucket_names: "{{ bucket_names | default([]) + [ (item | regex_search('ON `([^`]+)`', '\\1')) ] }}"
      loop: "{{ index_queries }}"

    - name: Extract operation types from Couchbase index queries
      set_fact:
        operation_types: "{{ operation_types | default([]) + [ (item | regex_search('^(CREATE|DROP|ALTER)', ignorecase=True)) ] }}"
      loop: "{{ index_queries }}"

    - name: Identify whether each query is default or specific scope/collection
      set_fact:
        query_scope_map: >-
          {%- set result = {} -%}
          {%- for q in index_queries -%}
            {%- if q is search('`[^`]+`\\.`[^`]+`\\.`[^`]+`') -%}
              {%- set _ = result.update({q: "specific (bucket.scope.collection)"}) -%}
            {%- else -%}
              {%- set _ = result.update({q: "default (bucket only → _default scope & _default collection)"}) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ result }}

    - name: Run Couchbase query script
      shell: >
        {{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s "SELECT * FROM system:indexes;" > fields.json 2>&1

    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      with_items: "{{ index_queries }}"
      register: syntax_check
      no_log: true

    - name: Fail if any index query has syntax errors
      fail:
        msg: "Index Query contains a syntax error. Double-check the error and re-run the query."
      when: syntax_check.results | selectattr('stdout', 'search', 'syntax error') | list | length > 0 

    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "not item | regex_search('META\\(\\)\\.id', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Run cbq command and save output to fields.json
      shell: /opt/couchbase/bin/cbq -u Admin -p redhat -s "SELECT * FROM system:indexes;" > fields.json 2>&1
      args:
        chdir: /home/ubuntu

    - name: Remove first 5 lines and create new_fields.json
      shell: tail -n +6 fields.json > new_fields.json
      args: 
        chdir: /home/ubuntu

    - name: Convert JSON to plain text using jq
      shell: jq -r '.[] | @text' new_fields.json > plain1.txt
      args:
        chdir: /home/ubuntu

    - name: Run extract2.py and redirect output to fields1.txt
      shell: python3 extract2.py > fields1.txt
      args:
        chdir: /home/ubuntu
        
    - name: Read file /home/ubuntu/fields1.txt
      slurp:
        src: /home/ubuntu/fields1.txt
      register: file_content

    - name: Set decoded file content as variable
      set_fact:
        decoded_indexes: "{{ file_content.content | b64decode }}"

    # ✅ FINAL SUMMARY MESSAGE
    - name: Print final summary of index query validation
      debug:
        msg: |
          ===== Couchbase Index Query Summary =====
          Extracted Bucket Names:
          {{ bucket_names | to_nice_yaml(indent=2) }}

          Operation Types:
          {{ operation_types | to_nice_yaml(indent=2) }}

          Classification:
          {% for q, t in query_scope_map.items() %}
          - Query: {{ q }}
            → Type: {{ t }}
          {% endfor %}
          =========================================
