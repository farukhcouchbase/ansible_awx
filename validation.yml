 
- name: Validate and Create Couchbase Indexes
  hosts: all
  gather_facts: no
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    couchbase_admin_username: []
    couchbase_admin_password: [] 
    index_queries: [] 
    INDEX_NAME: []
    script_path: "~/deffered_index.sh "
    # bucket_names: [] 
    duplicate_indexes: []
    some_query_output: [] 
    existing_index_map: []
    query_types: []
    query_type: []
    
    deffered_index_path: "/path/to/deffered_index.sh"
    default_index_path: "/path/to/default_index.sh"

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: []
        allowed_queries2: []
        not_allowed_queries: []
        queries_exceeding_fields: []
        query_field_mapping: []
        query_field_list: []

    - name: Extract bucket name from Couchbase index query
      set_fact:
        bucket_name: "{{ index_queries | regex_search('ON `([^`]+)`', '\\1') }}"

    - name: Print the extracted bucket name
      debug:
        msg: "The extracted bucket name is: {{ bucket_name }}"    

    - name: Extract operation type from Couchbase index query
      vars:
        query_type: "{{ index_queries | regex_search('^(CREATE|DROP|ALTER)', ignorecase=True) }}"
      debug:
        msg: >-
          {% if query_type is not none %}
            The query is of type: {{ query_type }}
          {% else %}
            The query type could not be determined.
          {% endif %}    

    - name: Run Couchbase query script
      shell: >
        {{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s "SELECT * FROM system:indexes;" > fields.json 2>&1
      
    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      with_items: "{{ index_queries }}"
      register: syntax_check
      no_log: true
      #failed_when: "'syntax error' in syntax_check.stdout"
      

    - name: Fail if any index query has syntax errors
      fail:
        msg: "Index Query contains a syntax error. Double-check the error and re-run the query."
      when: syntax_check.results | selectattr('stdout', 'search', 'syntax error') | list | length > 0 

    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "not item | regex_search('META\\(\\)\\.id', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Run the script
      shell: /home/ubuntu/index.sh 
      args:
        chdir: /home/ubuntu

    - name: Read file /home/ubuntu/fields1.txt
      slurp:
        src: /home/ubuntu/fields1.txt
      register: file_content

    - name: Print decoded file content
      debug:
        msg: "{{ file_content.content | b64decode }}"

    - name: Set decoded file content as variable
      set_fact:
        decoded_indexes: "{{ file_content.content | b64decode }}"

    - name: Extract original index metadata (safe parsing)
      set_fact:
        index_meta:
          name: "{{ decoded_indexes | regex_search('(?i)NAME\\s*:\\s*(.*?)\\n', '\\1') | default('') }}"
          bucket: "{{ decoded_indexes | regex_search('(?i)Bucket ID\\s*:\\s*(.*?)\\n', '\\1') | default('') }}"
          scope: "{{ decoded_indexes | regex_search('(?i)Scope ID\\s*:\\s*(.*?)\\n', '\\1') | default('') }}"
          collection: "{{ decoded_indexes | regex_search('(?i)Keyspace ID\\s*:\\s*(.*?)\\n', '\\1') | default('') }}"

          
    - name: Extract original index field metadata (safe parsing)
      set_fact:
        index_meta_2:
          fields: "{{ decoded_indexes | regex_search('(?i)Index Key\\s*:\\s*(.*?)\\n', '\\1') | default('') }}"

    - name: Debug extracted index field metadata
      debug:
        var: index_meta_2


    - name: Debug extracted index metadata
      debug:
        var: index_meta
    
    - name: Extract new index data from index_queries (safe parsing)
      set_fact:
        query_meta:
          name: "{{ index_queries | regex_search('(?i)create index `(.+?)`', '\\1') | default('') }}"
          bucket: "{{ index_queries | regex_search('ON `([^`]+)`\\.', '\\1') | default('') }}"
          scope: "{{ index_queries | regex_search('ON `[^`]+`\\.`([^`]+)`\\.', '\\1') | default('') }}"
          collection: "{{ index_queries | regex_search('ON `[^`]+`\\.`[^`]+`\\.`([^`]+)`', '\\1') | default('') }}"

    - name:  Extract new index data from index_queries (safe parsing) (field data)
      set_face:
        query_meta_2:
          fields: "{{ index_queries | regex_search('(?i)Index Key\\s*:\\s*(.*?)\\n', '\\1') | default('') }}"
          

    - name: Fail if name is different but location is the same
      fail:
        msg: >-
          ⚠️ Index with different name but same bucket , scope and collection are not allowed to create 
      when: >
        index_meta.name != query_meta.name and
        index_meta.bucket == query_meta.bucket and
        index_meta.scope == query_meta.scope and
        index_meta.collection == query_meta.collection
        index_meta_2.fields == query_meta_2.fields

    - name: Allow execution
      debug:
        msg: "✅ Index is allowed. Either name matches or location is different."
      when: >
        index_meta.name == query_meta.name or
        index_meta.bucket != query_meta.bucket or
        index_meta.scope != query_meta.scope or
        index_meta.collection != query_meta.collection   
    
    - name: Identify queries exceeding field limits
      set_fact:
        query_field_mapping: "{{ query_field_mapping | default({}) | combine({item: (item | regex_replace('.*ON\\s*[^()]+\\(([^)]+)\\).*', '\\1'))}) }}"
      with_items: "{{ index_queries }}"
      when:
        - "item is search('CREATE INDEX')"
        - "item is search('ON\\s*[^()]+\\(([^)]+)\\)')"

    - name: Convert field list to an array using split
      vars:
        cleaned_fields: "{{ item.value | replace('`', '') | regex_replace('\\s+', '') }}"
      set_fact:
        query_field_list: "{{ query_field_list | default({}) | combine({ item.key: cleaned_fields.split(',') }) }}"
      with_dict: "{{ query_field_mapping }}"

    - name: Identify queries exceeding 6 fields
      set_fact:
        queries_exceeding_fields: "{{ queries_exceeding_fields | default([]) + [item.key] }}"
      with_dict: "{{ query_field_list }}"
      when: "query_field_list[item.key] | length > 6"

    - name: Display warning for queries exceeding 6 fields
      debug:
        msg: "You are exceeding the limit of 6 fields in query '{{ item.key }}'. Please contact the admin."
      with_dict: "{{ query_field_list }}"
      when: "query_field_list[item.key] | length > 6"  

    - name: Debug - Queries exceeding field limits
      debug:
        msg: "Query exceeds field limit: {{ item }}"
      with_items: "{{ queries_exceeding_fields }}"

    - name: Stop execution if any query exceeds allowed field count
      fail:
        msg: "You are exceeding the limit of 6 fields in query .  Please contact the admin. : {{ queries_exceeding_fields }}"
      when: queries_exceeding_fields | length > 0

    - name: Identify not allowed queries
      set_fact:
        not_allowed_queries: "{{ not_allowed_queries + [item] }}"
      when:
        - "item | regex_search('CREATE PRIMARY INDEX', ignorecase=True) or not item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Remove semicolon using regex
      set_fact:
        allowed_queries2: "{{ allowed_queries | map('regex_replace', ';\\s*$', '') | list }}"

    - name: Debug - Allowed Queries
      debug:
        msg: "\033[32mAllowed Index Query: {{ item }}\033[0m"
      with_items: "{{ allowed_queries }}"

    - name: Debug - Not Allowed Queries
      debug:
        msg: "\033[33mNot Allowed Index Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"

    - name: Show the modified query
      debug:
        msg: "\033[34m{{ allowed_queries2 }}\033[0m"

    - name: Add WITH defer_build and num_replica options in index queries
      set_fact:
        updated_queries1: >-
          {{
            allowed_queries | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\\s*:\\s*true)(?=.*"num_replica"\\s*:\\s*1)', 
              '"defer_build":true,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"num_replica"\\s*:\\s*1)(?=.*"defer_build"\\s*:\\s*true)', 
              '"num_replica":1,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\\s*:\\s*true)(?!.*"num_replica"\\s*:\\s*1)', 
              '"defer_build":true, "num_replica":1,')
            | list
          }}

    - name: Ensure WITH clause in index queries
      set_fact:
        updated_queries2: >-
          {{
            allowed_queries2 | map('regex_replace', 
              'WITH\\s*\{[^}]*\}', 
              'WITH {"defer_build": true, "num_replica": 1}') 
            | map('regex_replace', 
              '(?i)(?!.*WITH\\s*\{.*\})$', 
              ' WITH {"defer_build": true, "num_replica": 1}') 
            | list
          }}

    - name: Debug - Updated Index Queries (Method 1)
      debug:
        msg: "\033[32mUpdated Query: {{ item }}\033[0m"
      with_items: "{{ updated_queries1 }}"

    - name: Debug - Updated Index Queries (Method 2)
      debug:
        msg: "\033[32mUpdated Query: {{ item }}\033[0m"
      with_items: "{{ updated_queries2 }}"
      
    - name: Execute allowed index queries (Method 2)
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries2 }}"
      when: updated_queries2 | length > 0
      register: query_result
      ignore_errors: no

    - name: Execute allowed index queries (Method 1)
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries1 }}"
      when: updated_queries1 | length > 0
      register: query_result
      ignore_errors: no

    - name: Run deferred index script for a bucket
      command: "{{ script_path }} --bucket={{ bucket_names | join(',') }}"
      args:
        chdir: "~"  # ensure we are in home directory
      register: script_output

    - name: Show script output
      debug:
        var: script_output.stdout

  
