- name: Validate and Create Couchbase Indexes
  hosts: all
  gather_facts: no
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    # couchbase_admin_username: "Admin"
    # couchbase_admin_password: "redhat"
    index_queries: []
    INDEX_NAME: []
    duplicate_indexes: []
    some_query_output: []
    existing_index_map: []
    deffered_index_path: "/path/to/deffered_index.sh"
    default_index_path: "/path/to/default_index.sh"

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: []
        allowed_queries2: []
        not_allowed_queries: []
        queries_exceeding_fields: []
        query_field_mapping: []
        query_field_list: []

    #==================================================================================================
    - name: Get all bucket names
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} --script='SELECT name FROM system:buckets;'"
      register: bucket_query
      changed_when: false

    - name: Extract bucket names
      set_fact:
        bucket_names: "{{ bucket_query.stdout | regex_findall('\"(.*?)\"') }}"

    - name: Fetch field names from each bucket
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} --script='SELECT RAW OBJECT_NAMES(d) FROM `{{ item }}` d LIMIT 100;'"
      loop: "{{ bucket_names }}"
      register: field_queries
      changed_when: false
      ignore_errors: yes  # Some buckets may not contain queryable JSON data

    - name: Extract unique field names
      set_fact:
        field_names: "{{ field_queries.results
          | selectattr('stdout', 'defined')
          | selectattr('stdout', 'search', '{')  # Ensure stdout contains JSON-like data
          | map(attribute='stdout')
          | map('from_json', default={})  # Prevent failures
          | map('keys')
          | list
          | flatten
          | unique }}"

    - name: Display field names
      debug:
        var: field_names
    
    # - name: Fetch existing indexes from Couchbase
    #   shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'SELECT RAW {\"name\": name, \"fields\": index_key} FROM system:indexes WHERE keyspace_id != \"\"'"
    #   register: existing_indexes
    #   changed_when: false

    # - name: Debug Couchbase query output
    #   debug:
    #     var: existing_indexes.stdout  

    # - name: Check if existing indexes output is valid JSON
    #   set_fact:
    #     is_valid_json: "{{ existing_indexes.stdout is not none and existing_indexes.stdout | trim | regex_search('^[{\\[]') is not none }}"

    # - name: Parse existing indexes into a dictionary (Only if JSON is valid)
    #   set_fact:
    #     existing_index_map: "{{ existing_indexes.stdout | from_json | json_query('[*].{name: name, fields: index_key}') }}"
    #   when: is_valid_json | bool

    # - name: Handle invalid JSON output
    #   debug:
    #     msg: "Warning: existing_indexes.stdout is not valid JSON"
    #   when: not is_valid_json | bool

    # - name: Validate syntax of index queries
    #   shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
    #   with_items: "{{ index_queries }}"
    #   register: syntax_check
    #   failed_when: "'syntax error' in syntax_check.stdout"

    # - name: Debug index fields and names
    #   debug:
    #     msg:
    #       - "Extracted fields: {{ item | regex_findall('ON \\S+\\((.*)\\)') | first | regex_replace('\\s+', '') }}"
    #       - "Extracted index name: {{ item | regex_findall('CREATE INDEX (\\S+)') | first }}"
    #       - "Existing index fields: {{ existing_index_map | map(attribute='fields') | list }}"
    #       - "Existing index names: {{ existing_index_map | map(attribute='name') | list }}"
    #   with_items: "{{ index_queries }}"  

    # - name: Validate new indexes against existing ones
    #   set_fact:
    #     duplicate_indexes: "{{ duplicate_indexes | default([]) + [item] }}"
    #   with_items: "{{ index_queries }}"
    #   when: >
    #     (item | regex_findall('ON \\S+\\((.*)\\)') | first | regex_replace('\\s+', '') in
    #     (existing_index_map | default([]) | map(attribute='fields') | list)) and
    #     (item | regex_findall('CREATE INDEX (\\S+)') | first not in 
    #     (existing_index_map | default([]) | map(attribute='name') | list))

    # - name: Debug extracted index fields
    #   debug:
    #     msg:
    #       - "Item: {{ item }}"
    #       - "Extracted Fields: {{ item | regex_findall('ON \\S+\\((.*)\\)') | first | regex_replace('\\s+', '') }}"
    #       - "Extracted Index Name: {{ item | regex_findall('CREATE INDEX (\\S+)') | first }}"
    #       - "Existing Index Fields: {{ existing_index_map | default([]) | map(attribute='fields') | list }}"
    #       - "Existing Index Names: {{ existing_index_map | default([]) | map(attribute='name') | list }}"
    #   with_items: "{{ index_queries }}"

    # - name: Debug duplicate indexes
    #   debug:
    #     var: duplicate_indexes  

    # - name: Set duplicate indexes fact
    #   set_fact:
    #     duplicate_indexes: "{{ some_query_output | selectattr('index_name', 'defined') | list }}"    
    
    # - name: Fail if duplicate indexes exist
    #   fail:
    #     msg: "Duplicate indexes with different names detected: {{ duplicate_indexes }}"
    #   when: duplicate_indexes | length > 0
    # #==================================================================================================    

    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      with_items: "{{ index_queries }}"
      register: syntax_check
      failed_when: "'syntax error' in syntax_check.stdout"


    

   
    


    - name: Identify queries exceeding field limits
      set_fact:
        query_field_mapping: "{{ query_field_mapping | default({}) | combine({item: (item | regex_replace('.*ON\\s*[^()]+\\(([^)]+)\\).*', '\\1'))}) }}"
      with_items: "{{ index_queries }}"
      when:
        - "item is search('CREATE INDEX')"
        - "item is search('ON\\s*[^()]+\\(([^)]+)\\)')"

    - name: Convert field list to an array using split
      vars:
        cleaned_fields: "{{ item.value | replace('`', '') | regex_replace('\\s+', '') }}"
      set_fact:
        query_field_list: "{{ query_field_list | default({}) | combine({ item.key: cleaned_fields.split(',') }) }}"
      with_dict: "{{ query_field_mapping }}"

    - name: Identify queries exceeding 6 fields
      set_fact:
        queries_exceeding_fields: "{{ queries_exceeding_fields | default([]) + [item.key] }}"
      with_dict: "{{ query_field_list }}"
      when: "query_field_list[item.key] | length > 6"

    - name: Display warning for queries exceeding 6 fields
      debug:
        msg: "You are exceeding the limit of 6 fields in query '{{ item.key }}'. Please contact the admin."
      with_dict: "{{ query_field_list }}"
      when: "query_field_list[item.key] | length > 6"  

    - name: Debug - Queries exceeding field limits
      debug:
        msg: "Query exceeds field limit: {{ item }}"
      with_items: "{{ queries_exceeding_fields }}"

    - name: Stop execution if any query exceeds allowed field count
      fail:
        msg: "You are exceeding the limit of 6 fields in query .  Please contact the admin. : {{ queries_exceeding_fields }}"
      when: queries_exceeding_fields | length > 0

    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "not item | regex_search('META\\(\\)\\.id', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Identify not allowed queries
      set_fact:
        not_allowed_queries: "{{ not_allowed_queries + [item] }}"
      when:
        - "item | regex_search('CREATE PRIMARY INDEX', ignorecase=True) or not item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Display not allowed queries in red
      debug:
        msg: "\033[1;31mNot Allowed Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"
      when: not_allowed_queries | length > 0  

    - name: Remove semicolon using regex
      set_fact:
        allowed_queries2: "{{ allowed_queries | map('regex_replace', ';\\s*$', '') | list }}"

    - name: Debug - Allowed Queries
      debug:
        msg: "\033[32mAllowed Index Query: {{ item }}\033[0m"
      with_items: "{{ allowed_queries }}"

    - name: Debug - Not Allowed Queries
      debug:
        msg: "\033[33mNot Allowed Index Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"

    - name: Show the modified query
      debug:
        msg: "\033[34m{{ allowed_queries2 }}\033[0m"

    - name: Add WITH defer_build and num_replica options in index queries
      set_fact:
        updated_queries1: >-
          {{
            allowed_queries | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\\s*:\\s*true)(?=.*"num_replica"\\s*:\\s*1)', 
              '"defer_build":true,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"num_replica"\\s*:\\s*1)(?=.*"defer_build"\\s*:\\s*true)', 
              '"num_replica":1,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\\s*:\\s*true)(?!.*"num_replica"\\s*:\\s*1)', 
              '"defer_build":true, "num_replica":1,')
            | list
          }}

    - name: Ensure WITH clause in index queries
      set_fact:
        updated_queries2: >-
          {{
            allowed_queries2 | map('regex_replace', 
              'WITH\\s*\{[^}]*\}', 
              'WITH {"defer_build": true, "num_replica": 1}') 
            | map('regex_replace', 
              '(?i)(?!.*WITH\\s*\{.*\})$', 
              ' WITH {"defer_build": true, "num_replica": 1}') 
            | list
          }}

    - name: Debug - Updated Index Queries (Method 1)
      debug:
        msg: "\033[32mUpdated Query: {{ item }}\033[0m"
      with_items: "{{ updated_queries1 }}"

    - name: Debug - Updated Index Queries (Method 2)
      debug:
        msg: "\033[32mUpdated Query: {{ item }}\033[0m"
      with_items: "{{ updated_queries2 }}"

    - name: Execute allowed index queries (Method 2)
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries2 }}"
      when: updated_queries2 | length > 0
      register: query_result
      ignore_errors: no

    - name: Execute allowed index queries (Method 1)
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries1 }}"
      when: updated_queries1 | length > 0
      register: query_result
      ignore_errors: no

    - name: Execute deferred_index.sh script
      command: "{{ deffered_index_path }}"
      args:
        chdir: "{{ deffered_index_path | dirname }}"
      register: script_output
