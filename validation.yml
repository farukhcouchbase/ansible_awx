---
- name: Validate and Create Couchbase Indexes
  hosts: all
  gather_facts: no
  vars:
    couchbase_host: "127.0.0.1"
    couchbase_bin_path: "/opt/couchbase/bin/cbq"
    couchbase_admin_username: "Admin"
    couchbase_admin_password: "redhat"
    index_queries: []  # This comes from the Ansible survey
    valid_queries: []

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        not_allowed_queries: []
        invalid_queries: []
       



      

    - name: Check each query for validity
      command: "cbq -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} --script '{{ item }}'"
      register: query_output
      failed_when: 
        - query_output.rc != 0  # Fail if command returns a non-zero exit code
        - "'syntax error' in query_output.stdout or 'ERROR' in query_output.stdout"
      changed_when: false
      with_items: "{{ index_queries }}"
      when: 
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
        - name: Capture exact syntax errors
          set_fact:
            syntax_errors: "{{ query_output.results | selectattr('stderr', 'defined') | selectattr('stderr', 'search', 'syntax error|ERROR') | map(attribute='stderr') | list }}"

    - name: Fail playbook if there were any errors
      fail:
        msg: "Syntax errors or invalid queries found:\n{{ syntax_errors | join('\n') }}"
      when: syntax_errors | length > 0   
 
    - name: Fail playbook if there were any errors
      fail:
        msg: "Syntax errors or invalid queries found. Check the output above."
      when: "query_output.results | selectattr('stderr', 'defined') | selectattr('stderr', 'search', 'syntax error|ERROR') | list | length > 0"

    - name: Add valid queries to the allowed list
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      with_items: "{{ index_queries }}"
      when: 
        - "item in query_output.results"    
 

    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when: 
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

  
    - name: Identify not allowed queries
      set_fact:
        not_allowed_queries: "{{ not_allowed_queries + [item] }}"
      when: 
        - "item | regex_search('CREATE PRIMARY INDEX', ignorecase=True) or not item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Debug - Allowed Queries
      debug:
        msg: "Allowed Index Query: {{ item }}"
      with_items: "{{ allowed_queries }}"

    - name: Debug - Not Allowed Queries
      debug:
        msg: "Not Allowed Index Query: {{ item }}"
      with_items: "{{ not_allowed_queries }}"

    

    - name: Ensure defer_build and num_replica options in index queries
      set_fact:
        updated_queries: >-
          {{
            allowed_queries | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\s*:\s*true)(?=.*"num_replica"\s*:\s*1)', 
              '"defer_build":true,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"num_replica"\s*:\s*1)(?=.*"defer_build"\s*:\s*true)', 
              '"num_replica":1,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\s*:\s*true)(?!.*"num_replica"\s*:\s*1)', 
              '"defer_build":true, "num_replica":1,')
            | list
          }} 

    - name: Debug - Updated Index Queries
      debug:
        msg: "Updated Query: {{ item }}"
      with_items: "{{ updated_queries }}"      

    - name: Execute allowed index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries }}"
      when: allowed_queries | length > 0
      register: query_result

    - name: Execute deffered_index.sh script
      command: "{{ deffered_index_path }}"
      args:
        chdir: "{{ deffered_index_path | dirname }}"
      register: script_output
      # Executes the deffered_index.sh script after index creation  

  
