---
- name: Validate and Create Couchbase Indexes
  hosts: all
  gather_facts: no
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    couchbase_admin_username: "admin"
    couchbase_admin_password: "password"
    index_queries: []
    INDEX_NAME: []
    deffered_index_path: "/path/to/deffered_index.sh"
    default_index_path:  "/path/to/default_index.sh"

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: [] 
        allowed_queries2: []
        not_allowed_queries: []

    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      register: syntax_check
      with_items: "{{ index_queries }}"
      #ignore_errors: yes  # Prevents failure from stopping execution
      failed_when: "'syntax error' in syntax_check.stderr or 'syntax error' in syntax_check.stdout"

   
   

    

    
   
    - name: Identify duplicate indexes on the same fields
      set_fact:
        duplicate_indexes: "{{ duplicate_indexes + index_field_map[item] }}"
      when: "item in index_field_map and index_field_map[item] | length > 1"
      with_items: "{{ index_field_map.keys() | list }}"    

    - name: Initialize index field map
      set_fact:
        index_field_map: {}
  
    
  
    # - name: Extract index names and fields from queries
    #   set_fact:
    #     index_field_map: >-
    #       {{
    #         index_field_map | default({})
    #         | combine({
    #           (item | regex_search('CREATE INDEX \\w+ ON \\w+\\.\\w+\\(([^)]+)\\)', '\\1') | trim):
    #             (index_field_map.get(item | regex_search('CREATE INDEX \\w+ ON \\w+\\.\\w+\\(([^)]+)\\)', '\\1') | trim, []) + [item]
    #         })
    #       }}
    #   with_items: "{{ index_queries }}"

    - name: Identify duplicate indexes on the same fields
      set_fact:
        duplicate_indexes: "{{ duplicate_indexes | default([]) + index_field_map[item] }}"
      when: "index_field_map[item] | length > 1"
      with_items: "{{ index_field_map.keys() }}"

    - name: Fail if multiple indexes exist on the same fields
      fail:
        msg: "❌ Multiple indexes with different names found on the same fields: {{ duplicate_indexes }}"
      when: duplicate_indexes | length > 0
    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Identify not allowed queries
      set_fact:
        not_allowed_queries: "{{ not_allowed_queries + [item] }}"
      when:
        - "item | regex_search('CREATE PRIMARY INDEX', ignorecase=True) or not item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Display not allowed queries in red
      debug:
        msg: "\033[1;31mNot Allowed Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"
      when: not_allowed_queries | length > 0  

    - name: Remove semicolon using regex
      set_fact:
        allowed_queries2: "{{ allowed_queries | map('regex_replace', ';\\s*$', '') | list }}"

    - name: Debug - Allowed Queries
      debug:
        msg: "\033[32mAllowed Index Query: {{ item }}\033[0m"
      with_items: "{{ allowed_queries }}"

    - name: Debug - Not Allowed Queries
      debug:
        msg: "\033[33mNot Allowed Index Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"

    - name: Show the modified query
      debug:
        msg: "\033[34m{{ allowed_queries2 }}\033[0m"

    - name: Add WITH defer_build and num_replica options in index queries
      set_fact:
        updated_queries1: >-
          {{
            allowed_queries | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\s*:\s*true)(?=.*"num_replica"\s*:\s*1)', 
              '"defer_build":true,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"num_replica"\s*:\s*1)(?=.*"defer_build"\s*:\s*true)', 
              '"num_replica":1,') 
            | map('regex_replace', 
              '(?<=\{)(?!.*"defer_build"\s*:\s*true)(?!.*"num_replica"\s*:\s*1)', 
              '"defer_build":true, "num_replica":1,')
            | list
          }}

    - name: Ensure WITH clause in index queries
      set_fact:
        updated_queries2: >-
          {{
            allowed_queries2 | map('regex_replace', 
              'WITH\s*\{[^}]*\}', 
              'WITH {"defer_build": true, "num_replica": 1}') 
            | map('regex_replace', 
              '(?i)(?!.*WITH\s*\{.*\})$', 
              ' WITH {"defer_build": true, "num_replica": 1}') 
            | list
          }}

    - name: Debug - Updated Index Queries
      debug:
        msg: "\033[32mUpdated Query: {{ item }}\033[0m"
      with_items: "{{ updated_queries1 }}"

    - name: Debug - Updated Index Queries
      debug:
        msg: "\033[32mUpdated Query: {{ item }}\033[0m"
      with_items: "{{ updated_queries2 }}"

    - name: Execute allowed index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries2 }}"
      when: updated_queries2 | length > 0
      register: query_result
      ignore_errors: no   

    - name: Execute allowed index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ updated_queries1 }}"
      when: updated_queries1 | length > 0
      register: query_result
      ignore_errors: no

    - name: Execute deferred_index.sh script
      command: "{{ deffered_index_path }}"
      args:
        chdir: "{{ deffered_index_path | dirname }}"
      register: script_output

    # - name: Execute default_index_path.sh script
    #   command: "{{ default_index_path }}"
    #   args:
    #     chdir: "{{ default_index_path | dirname }}"
    #   register: script_output  
