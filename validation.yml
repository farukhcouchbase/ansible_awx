---
- name: Validate and Create Couchbase Indexes
  hosts: all 
  gather_facts: no
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    couchbase_admin_username: "admin"
    couchbase_admin_password: "password"
    index_queries: []
    INDEX_NAME: []
    deffered_index_path: "/path/to/deffered_index.sh"
    default_index_path:  "/path/to/default_index.sh"

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: [] 
        allowed_queries2: []
        not_allowed_queries: []

    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      register: syntax_check
      with_items: "{{ index_queries }}"
      failed_when: "'syntax error' in syntax_check.stderr or 'syntax error' in syntax_check.stdout"

    - name: Identify incorrect queries
      set_fact:
        incorrect_queries: "{{ incorrect_queries | default([]) + [item.item] }}"
      with_items: "{{ syntax_check.results }}"
      when: "'syntax error' in item.stderr or 'syntax error' in item.stdout"

    - name: Identify correct queries
      set_fact:
        correct_queries: "{{ correct_queries | default([]) + [item.item] }}"
      with_items: "{{ syntax_check.results }}"
      when: "'syntax error' not in item.stderr and 'syntax error' not in item.stdout"

    - name: Suggest corrected queries
      set_fact:
        corrected_queries: "{{ corrected_queries | default([]) + [lookup('template', 'fix_couchbase_query.j2', item=item)] }}"
      with_items: "{{ incorrect_queries }}"
      when: incorrect_queries is defined

    - name: Show valid queries
      debug:
        msg: "Valid Query: {{ item }}"
      with_items: "{{ correct_queries }}"
      when: correct_queries is defined

    - name: Show invalid queries and suggestions
      debug:
        msg: "{{ corrected_queries }}"
      when: corrected_queries is defined
  
    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
        - "not item | regex_search('WHERE\s+doc\.type\s*=\s*', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Identify not allowed queries
      set_fact:
        not_allowed_queries: "{{ not_allowed_queries + [item] }}"
      when:
        - "item | regex_search('CREATE PRIMARY INDEX', ignorecase=True) or not item | regex_search('WHERE', ignorecase=True)"
        - "item | regex_search('WHERE\s+doc\.type\s*=\s*', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Display not allowed queries in red
      debug:
        msg: "\033[1;31mNot Allowed Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"
      when: not_allowed_queries | length > 0  

    - name: Remove semicolon using regex
      set_fact:
        allowed_queries2: "{{ allowed_queries | map('regex_replace', ';\\s*$', '') | list }}"

    - name: Debug - Allowed Queries
      debug:
        msg: "\033[32mAllowed Index Query: {{ item }}\033[0m"
      with_items: "{{ allowed_queries }}"

    - name: Debug - Not Allowed Queries
      debug:
        msg: "\033[33mNot Allowed Index Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"

    - name: Show the modified query
      debug:
        msg: "\033[34m{{ allowed_queries2 }}\033[0m"

    - name: Execute allowed index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s '{{ item }}'"
      with_items: "{{ allowed_queries2 }}"
      when: allowed_queries2 | length > 0
      register: query_result
      ignore_errors: no   

    - name: Execute deferred_index.sh script
      command: "{{ deffered_index_path }}"
      args:
        chdir: "{{ deffered_index_path | dirname }}"
      register: script_output
