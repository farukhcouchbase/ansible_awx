- name: Validate and Create Couchbase Indexes 
  hosts: all
  gather_facts: no  
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    couchbase_admin_username: ""
    couchbase_admin_password: ""  
    index_queries: []  
    INDEX_NAME: ""
    script_path: "~/deffered_index.sh"
    duplicate_indexes: []
    some_query_output: []  
    existing_index_map: []
    query_types: []
    query_type: ""

    specific_index_list: []
    default_index_list: []
    
    deffered_index_path: "/path/to/deffered_index.sh"
    default_index_path: "/path/to/default_index.sh"

  tasks:
    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: []
        allowed_queries2: []
        not_allowed_queries: []
        queries_exceeding_fields: []
        query_field_mapping: []
        query_field_list: []

    - name: Extract bucket name from Couchbase index query
      set_fact:
        bucket_name: "{{ index_queries | regex_search('ON `([^`]+)`', '\\1') }}"

    - name: Print the extracted bucket name
      debug:
        msg: "The extracted bucket name is: {{ bucket_name }}"    

    - name: Extract operation type from Couchbase index query
      vars:
        query_type: "{{ index_queries | regex_search('^(CREATE|DROP|ALTER)', ignorecase=True) }}"
      debug:
        msg: >-
          {% if query_type is not none %}
            The query is of type: {{ query_type }}
          {% else %}
            The query type could not be determined.
          {% endif %}    

    - name: Run Couchbase query script
      shell: >
        {{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s "SELECT * FROM system:indexes;" > fields.json 2>&1
      
    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      with_items: "{{ index_queries }}"
      register: syntax_check
      no_log: true

    - name: Fail if any index query has syntax errors
      fail:
        msg: "Index Query contains a syntax error. Double-check the error and re-run the query."
      when: syntax_check.results | selectattr('stdout', 'search', 'syntax error') | list | length > 0 

    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "not item | regex_search('META\\(\\)\\.id', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"
      with_items: "{{ index_queries }}"

    - name: Run cbq command and save output to fields.json
      shell: /opt/couchbase/bin/cbq -u Admin -p redhat -s "SELECT * FROM system:indexes;" > fields.json 2>&1
      args:
        chdir: /home/ubuntu

    - name: Remove first 5 lines and create new_fields.json
      shell: tail -n +6 fields.json > new_fields.json
      args: 
        chdir: /home/ubuntu

    - name: Convert JSON to plain text using jq
      shell: jq -r '.[] | @text' new_fields.json > plain1.txt
      args:
        chdir: /home/ubuntu

    - name: Run extract2.py and redirect output to fields1.txt
      shell: python3 extract2.py > fields1.txt
      args:
        chdir: /home/ubuntu
        
    - name: Read file /home/ubuntu/fields1.txt
      slurp:
        src: /home/ubuntu/fields1.txt
      register: file_content

    - name: Set decoded file content as variable
      set_fact:
        decoded_indexes: "{{ file_content.content | b64decode }}"

    ##################################################################
    # QUERY TYPE IDENTIFICATION (UPDATED)
    ##################################################################
    
    # 1. Ensure index_queries is a list
    - name: Ensure index_queries is a list
      set_fact:
        index_queries_list: >-
          {{
            (index_queries | default(''))
            | regex_replace(';$','')                       
            | regex_findall('[^\r\n]+')                   
            | map('trim')                                   
            | reject('equalto','')                         
            | list
          }}

    # 2. Initialize query_type_flags as empty list (safety)
    - name: Initialize query_type_flags as empty list
      set_fact:
        query_type_flags: []
 
    - name: Determine query type for each index query and set flags
      set_fact:
        query_type_flags: >-
          {{
            (index_queries_list | default([]))
            | map('regex_search', '^CREATE INDEX .*`[^`]+`\.`[^`]+`\.`[^`]+`', ignorecase=True)
            | map('ternary', 'specific', 'default')
            | list
          }}

    # 4. Debug - Query type flags
    - name: Debug - Query type flags
      debug:
        msg: "Query {{ item_index }} is '{{ query_type_flags[item_index] }}'"
      loop: "{{ range(0, index_queries_list | length) | list }}"
      loop_control:
        loop_var: item_index

    # 5. Initialize default index list
    - name: Initialize default index list
      set_fact:
        default_index_list: "{{ default_index_list | default([]) + [ index_queries_list[item_index] ] }}"
      loop: "{{ range(0, index_queries_list | length) | list }}"
      loop_control:
        loop_var: item_index
      when: query_type_flags[item_index] == 'default'

    # 6. Initialize specific index list
    - name: Initialize specific index list
      set_fact:
        specific_index_list: "{{ specific_index_list | default([]) + [ index_queries_list[item_index] ] }}"
      loop: "{{ range(0, index_queries_list | length) | list }}"
      loop_control:
        loop_var: item_index
      when: query_type_flags[item_index] == 'specific'

    # 7. Optional: Debug the final lists
    - name: Debug - Final index lists
      debug:
        msg:
          default_indexes: "{{ default_index_list | default([]) }}"
          specific_indexes: "{{ specific_index_list | default([]) }}"

    - name: Set execution mode for index flow
      set_fact:
        is_default_query: "{{ (default_index_list | length > 0) and (specific_index_list | length == 0) }}"
        is_specific_query: "{{ (specific_index_list | length > 0) and (default_index_list | length == 0) }}"      

  


        
