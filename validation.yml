- name: Validate and Create Couchbase Indexes
  hosts: all
  gather_facts: no
  vars:
    couchbase_bin_path: "/path/to/couchbase_bin"
    # couchbase_admin_username: "Admin"
    # couchbase_admin_password: "redhat"
    index_queries: []
    INDEX_NAME: []
    duplicate_indexes: []
    some_query_output: []
    existing_index_map: []
    deferred_index_path: "/path/to/deferred_index.sh"
    default_index_path: "/path/to/default_index.sh"

  tasks:

    - name: Read file content
      command: cat /home/ubuntu/fields.txt
      register: file_content
      changed_when: false

    - name: Print file content
      debug:
        msg: "{{ file_content.stdout  }}"

    - name: Identify and categorize index queries
      set_fact:
        allowed_queries: []
        allowed_queries1: []
        allowed_queries2: []
        not_allowed_queries: []
        queries_exceeding_fields: []
        query_field_mapping: []
        query_field_list: []

    - name: Validate syntax of index queries
      shell: "{{ couchbase_bin_path }} -u {{ couchbase_admin_username }} -p {{ couchbase_admin_password }} -s 'EXPLAIN {{ item }}'"
      with_items: "{{ index_queries }}"
      register: syntax_check
      failed_when: "'syntax error' in syntax_check.stdout"

    - name: Identify queries exceeding field limits
      set_fact:
        query_field_mapping: "{{ query_field_mapping | default({}) | combine({item: (item | regex_replace('.*ON\\s*[^()]+\\(([^)]+)\\).*', '\\1'))}) }}"
      with_items: "{{ index_queries }}"
      when:
        - "item is search('CREATE INDEX')"
        - "item is search('ON\\s*[^()]+\\(([^)]+)\\)')"

    - name: Convert field list to an array using split
      vars:
        cleaned_fields: "{{ item.value | replace('`', '') | regex_replace('\\s+', '') }}"
      set_fact:
        query_field_list: "{{ query_field_list | default({}) | combine({ item.key: cleaned_fields.split(',') }) }}"
      with_dict: "{{ query_field_mapping }}"

    - name: Identify queries exceeding six fields
      set_fact:
        queries_exceeding_fields: "{{ queries_exceeding_fields | default([]) + [item.key] }}"
      with_dict: "{{ query_field_list }}"
      when: "query_field_list[item.key] | length > 6"

    - name: Display warning for queries exceeding six fields
      debug:
        msg: "The query '{{ item.key }}' exceeds the limit of six fields. Please contact the administrator."
      with_dict: "{{ query_field_list }}"
      when: "query_field_list[item.key] | length > 6"

    - name: Stop execution if any query exceeds the allowed field count
      fail:
        msg: "The following queries exceed the limit of six fields. Please contact the administrator: {{ queries_exceeding_fields }}"
      when: queries_exceeding_fields | length > 0

    - name: Validate index queries
      set_fact:
        allowed_queries: "{{ allowed_queries + [item] }}"
      with_items: "{{ index_queries }}"
      when:
        - "not item | regex_search('CREATE PRIMARY INDEX', ignorecase=True)"
        - "not item | regex_search('META\\(\\)\\.id', ignorecase=True)"
        - "item | regex_search('CREATE INDEX', ignorecase=True)"
        - "item | regex_search('WHERE', ignorecase=True)"

    - name: Identify not allowed queries
      set_fact:
        not_allowed_queries: "{{ not_allowed_queries + [item] }}"
      with_items: "{{ index_queries }}"
      when:
        - "item | regex_search('CREATE PRIMARY INDEX', ignorecase=True) or not item | regex_search('WHERE', ignorecase=True)"

    - name: Display not allowed queries in red
      debug:
        msg: "\033[1;31mNot Allowed Query: {{ item }}\033[0m"
      with_items: "{{ not_allowed_queries }}"
      when: not_allowed_queries | length > 0

    - name: Remove semicolons from queries
      set_fact:
        allowed_queries2: "{{ allowed_queries | map('regex_replace', ';\\s*$', '') | list }}"

    - name: Execute deferred_index.sh script
      command: "{{ deferred_index_path }}"
      args:
        chdir: "{{ deferred_index_path | dirname }}"
      register: script_output
